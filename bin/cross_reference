#!/usr/bin/env ruby

require 'bundler/inline'
require 'yaml'
require_relative '../lib/aterm/dsl'

CONFIG_PATH = 'config.yml'.freeze
TESTS_OUTPUT_PATH = 'output/extract_tests_output.yml'.freeze
CONSTRAINTS_OUTPUT_PATH = 'output/extract_constraints_output.yml'.freeze
OUTPUT_PATH = 'output/cross_reference_output.yml'.freeze

gemfile do
  source 'https://rubygems.org'
  gem 'tty-prompt'
end

prompt = TTY::Prompt.new

unless File.file?(TESTS_OUTPUT_PATH)
  puts "Error: could not find \"#{TESTS_OUTPUT_PATH}\", please extract tests first"
  exit(1)
end
unless File.file?(CONSTRAINTS_OUTPUT_PATH)
  puts "Error: could not find \"#{CONSTRAINTS_OUTPUT_PATH}\", please extract constraints first"
  exit(1)
end

tests = YAML.safe_load(File.read(TESTS_OUTPUT_PATH))
constraints = YAML.safe_load(File.read(CONSTRAINTS_OUTPUT_PATH))

rules_for = lambda do |constructor|
  ids = constraints['constructors'][constructor] || []
  ids.map { |id| constraints['rules'][id] }
end

if File.file?(OUTPUT_PATH)
  puts "picking up output building where we left off: \"#{OUTPUT_PATH}\""
  coverage = YAML.safe_load(File.read(OUTPUT_PATH))
else
  puts 'initializing output data structure from scratch'
  coverage = {
    'coverage' => constraints['rules']
        .transform_values { |x| { 'rule' => x, 'tests' => [] } },
    'progress' => {}
  }
end
cover = lambda do |test, rule_id|
  coverage['coverage'][rule_id]['tests'] << test['description']
end
flush = lambda do
  puts "saving progress to \"#{OUTPUT_PATH}\""
  File.write(OUTPUT_PATH, YAML.dump(coverage))
end

choices_remaining = 0
choices_remaining_length = choices_remaining.to_s.size
tests.each do |test|
  coverage['progress'][test['description']] ||= {}

  test_constructors = test['ast'].scan(/(?<![a-zA-Z0-9"])([A-Z][a-zA-Z0-9]+)(?!=[a-zA-Z"])/)
      .flatten.uniq
  applicable_rule_options = test_constructors.filter_map do |constructor|
    rules = rules_for[constructor]
    next if rules.empty?

    [constructor, rules]
  end.to_h

  constructor_constraint_rule_options = applicable_rule_options.transform_values do |rules|
    rules.group_by { |rule| rule['constraint'] }
  end

  constructor_constraint_rule_options.each do |constructor, constraint_rule_options|
    constraint_rule_options.each do |constraint, rule_options|
      next if coverage['progress'][test['description']][[constructor, constraint]]

      choices_remaining += 1 if rule_options.size > 1
    end
  end
end

choice = 1
tests.each do |test|
  coverage['progress'][test['description']] ||= {}

  test_constructors = test['ast'].scan(/(?<![a-zA-Z0-9"])([A-Z][a-zA-Z0-9]+)(?!=[a-zA-Z"])/)
      .flatten.uniq
  applicable_rule_options = test_constructors.filter_map do |constructor|
    rules = rules_for[constructor]
    next if rules.empty?

    [constructor, rules]
  end.to_h

  constructor_constraint_rule_options = applicable_rule_options.transform_values do |rules|
    rules.group_by { |rule| rule['constraint'] }
  end

  constructor_constraint_rule_options.each do |constructor, constraint_rule_options|
    constraint_rule_options.each do |constraint, rule_options|
      next if coverage['progress'][test['description']][[constructor, constraint]]

      if rule_options.size == 1
        cover[test, rule_options.first['id']]
      else
        puts test['ast']
        puts ATerm::DSL.declare { test['ast'] }.to_s(highlight: constructor)
        selection = prompt.multi_select(
            "Choice: #{choice.to_s.rjust(choices_remaining_length, '0')} / #{choices_remaining}\n" \
            "Constructor: #{constructor}\n" \
            "Constraint: #{constraint}\n" \
            "Test: #{test['description']}\n" \
            'Which rule(s) apply to the above AST?',
            per_page: 20, cycle: true, echo: false
          ) do |menu|
          rule_options.each do |rule|
            menu.choice name: rule['head'], value: rule['id']
          end
        end
        selection.each do |rule_id|
          cover[test, rule_id]
        end
        choice += 1
      end

      coverage['progress'][test['description']][[constructor, constraint]] = true
      flush[]
    end
  end
end

series = coverage['coverage'].values.map { |x| x['tests'].size }
uncovered_rules_count = series.count(&:zero?)
uncovered_rules = coverage['coverage'].values.select { |x| x['tests'].empty? }
uncovered_rules_per_constraint = uncovered_rules.group_by { |x| x['rule']['constraint'] }
rule_counts_per_constraint = constraints['rules'].values
    .group_by { |x| x['constraint'] }
    .transform_values(&:count)

puts 'CONSTRAINT COVERAGE'
puts (1.0 - (uncovered_rules_count.to_f / series.count)) * 100.0
puts
puts "TEST COUNT SERIES (#{series.size})"
puts series.inspect
puts
puts "UNCOVERED RULES (#{uncovered_rules_count})"
uncovered_rules.each do |rule|
  puts [rule['rule']['head'], rule['rule']['path']].inspect
end
puts
puts "UNCOVERED RULE COUNT PER CONSTRAINT (#{uncovered_rules_per_constraint.size})"
uncovered_rules_per_constraint.each do |constraint, rules|
  total_count = rule_counts_per_constraint[constraint]
  uncovered_count = rules.count
  percentage_uncovered = uncovered_count.to_f / total_count

  puts [constraint, uncovered_count, percentage_uncovered].inspect
end
